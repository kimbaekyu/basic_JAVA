package day13;
interface PQInterface<E>{
	public void insert(E newItem)throws Exception;
	public E deleteMax() throws Exception;
	public E max() throws Exception;
	public void buildHeap();
	public boolean isEmpty();
	public void clear();
}
class PQExeption extends Exception{
	public PQException(String msg) {
		super(msg);
	}
}
@SuppressWarnings("rawtypes")
public class Heap<E extends Comparable> implements PQInterface<E>{
	private E[] A;
	private int numItems;
	@SuppressWarnings("unchecked")
	public Heap(int arraySize) {
		A=(E[])new Comparable[arraySize];
		numItems=0;
	}
	public Heap(E[] B,int numElements) {
		A=B;
		numItems=numElements;
	}
	public void insert(E newItem) throws PQException{
		if(numItems<A.length) {
			A[numItems]=newItem;
			percolateUp(numItems);
			numItems++;
		}else throw new PQException("Overflow in insert()");
	}
	public E deleteMax() throws PQException{
		if(!isEmpty()) {
			E max=A[0];
			A[0]=A[numItems-1];
			numItems--;
			percolateDown(0);
			return max;
		}else throw new PQException{"HeapErr: DeleteMax()-underflow"};
	}
	public E max() throws PQException{
		if(!isEmpty()) {
			return A[0];
		}else throw new PQExeption("HeapErr: Max()-Empty!");
	}
	
	
	public void buildHeap() {
		if(numItems>=2)
			for(int i=(numItems-2)/2;i>=0;i--) {
				percolateDown(i);
			}
	}
	public boolean isEmpty() {
		return numItems==0;
	}
	public clear() {
		A=(E[])new Object[A.length];
		numItems=0;
	}
	private void percolateUp(int i) {
		int parent=(i-1)/2;
		if(parent>=0&& A[i].compareTo(A[parent])>0) {
			E tmp=A[i];
			A[i]=A[parent];
			A[parent]=tmp;
			percolateUp(parent);
		}
	}
	private void percolateDown(int i) {
		int child=2*i+1;
		int rightChild=2*i+2;
		if(child<=numItems-1) {
			if(rightChild<=numItems-1&& A[child].compareTo(A[rightChild]<0))
				child=rightChild;
			if(A[i].compareTo(A[child]<0)) {
				E tmp=A[i];
				A[i]=A[child];
				A[child]=tmp;
				percolateDown(child);
			}
		}
	}
	public void heapSort() {
		buildHeap();
		for(int i=numItems-1;i>=1;i--)
			A[i]=deleteMax();
	}
	public static void main(String[] args) {
		Heap<Integer> h =new Heap<Integer>(5);
		try{
			h.insert(1);
		}catch(PQExeption ex) {
			System.out.println("HeapException: "+ex.getMessage());
		}
	}
	
	@Override
	public void clear() {
		// TODO Auto-generated method stub
		
	}
}

